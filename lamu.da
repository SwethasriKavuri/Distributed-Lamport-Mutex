import sys
import random
import time
config(channel is fifo, clock is lamport)

class P(process):

    def setup(s:set, nrequests:int):  # s is set of all other processes
        self.q = set()

    def request_task():
        --request
        c = logical_clock()
        send(('request', c, self),to= s)
        q.add(('request', c, self))
        output('request_task {}'.format(('request', c, self)))

    def critical_section(task):
        --critical_section
        y = self
        set_check = setof(('request', c, y), ('request', c, _y) in q)
        if set_check: 
            (x,min_c,pid) = min(setof(('request', c, y), ('request', c, _y) in q))
            await(each(('request', c2, p) in q,
                       has=(c2, p) == (min_c,self) or (min_c, self) < (c2, p)) and
                  each(p in s, has=some(received(('ack', c2, _p)), has=c2 > min_c)))
            task()

    def release():
        --release
        y = self
        set_check = setof(('request', c, y), ('request', c, _y) in q)
        process_set = random.sample(set_check,1)[0]
        q.remove(('request',process_set[1], self))
        output('release {}'.format(('request',process_set[1], self)))
        send(('release', logical_clock(), self), to=s)
       

    # def mutex(task):
    #     -- request
    #     c = logical_clock()
    #     send(('request', c, self), to= s)
    #     q.add(('request', c, self))
    #     await(each(('request', c2, p) in q,
    #                has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
    #           each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))
    #     -- critical_section
    #     task()
    #     -- release
    #     q.remove(('request', c, self))
    #     send(('release', logical_clock(), self), to= s)

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)
        #output('receive')

    def receive(msg= ('release', _, p)):
        for x in random.sample(setof(('request', c, p), ('request', c, _p) in q),1):
            q.remove(x)
            break

    def run():
        def task():
            output('in cs')
        start_time = time.time()  
        cpu_time = time.clock()     
        place_request = 0
        complete_request = 0
        while complete_request < nrequests:
            req_count = random.randint(1, nrequests-place_request) if nrequests > place_request else 0 #4
            for i in range(req_count):
                request_task()
            place_request+=req_count
            critical = random.randint(1,place_request-complete_request) if nrequests > place_request else place_request-complete_request #2
            for i in range(critical):
                critical_section(task)
                release()
            complete_request+= critical
        send(('done', self), to= parent())
        time_taken = time.time() - start_time
        time_taken = round(time_taken,4)
        total_cpu_time = time.clock() - cpu_time
        total_cpu_time = round(total_cpu_time,4) 
        algorithm = "My Lamport algorithm"
        send(('Time Analysis',algorithm,time_taken,total_cpu_time,self),to = parent())   
        await(received(('done',), from_= parent()))
        output('terminating')

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    ps = new(P, num=nprocs)
    for p in ps: setup(p, (ps-{p}, nrequests))
    start(ps)
    await(each(p in ps, has=received(('done', p))))
    send(('done',), to=ps)

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
